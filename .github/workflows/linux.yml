name: Linux

on: [push, pull_request]

jobs:
  compatibility:
    runs-on: ubuntu-18.04
    container: streamhpc/opencl-sdk-intelcpu:ubuntu-18.04-20220120
    strategy:
      matrix:
        # TODO: CMake 3.10.3 is SDK minimum (and ubuntu 18.04 canonical apt repo ver), not this repo's min
        # Replace once backport to C++14 happened
        include:
          # Unix Makefiles
          - C_COMPILER: [gcc-7]
            CXX_COMPILER: [g++-7]
            CMAKE: [3.10.3]
            GEN: [Unix Makefiles]
            CONFIG: [Debug, Release]
            #BIN: [64, 32]
            BIN: [64]
          - C_COMPILER: [gcc-11]
            CXX_COMPILER: [g++-11]
            CMAKE: [3.10.3]
            GEN: [Unix Makefiles]
            CONFIG: [Debug, Release]
            BIN: [64]
          - C_COMPILER: [clang-8]
            CXX_COMPILER: [clang++-8]
            CMAKE: [3.10.3]
            GEN: [Unix Makefiles]
            CONFIG: [Debug, Release]
            BIN: [64]
          - C_COMPILER: [clang-13]
            CXX_COMPILER: [clang++-13]
            CMAKE: [3.10.3]
            GEN: [Unix Makefiles]
            CONFIG: [Debug, Release]
            BIN: [64]
          - C_COMPILER: [gcc-7]
            CXX_COMPILER: [g++-7]
            CMAKE: [3.22.1]
            GEN: [Ninja Multi-Config]
            CONFIG: [Debug-And-Release]
            BIN: [64]
          - C_COMPILER: [gcc-11]
            CXX_COMPILER: [g++-11]
            CMAKE: [3.22.1]
            GEN: [Ninja Multi-Config]
            CONFIG: [Debug-And-Release]
            BIN: [64]
          - C_COMPILER: [clang-8]
            CXX_COMPILER: [clang++-8]
            CMAKE: [3.22.1]
            GEN: [Ninja Multi-Config]
            CONFIG: [Debug-And-Release]
            BIN: [64]
          - C_COMPILER: [clang-13]
            CXX_COMPILER: [clang++-13]
            CMAKE: [3.22.1]
            GEN: [Ninja Multi-Config]
            CONFIG: [Debug-And-Release]
            BIN: [64]
    env:
      CMAKE_EXE: /opt/Kitware/CMake/${{ matrix.CMAKE }}/bin/cmake
      CTEST_EXE: /opt/Kitware/CMake/${{ matrix.CMAKE }}/bin/ctest


    steps:
    - name: Checkout OpenCL-Layers
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Checkout OpenCL-Headers
      uses: actions/checkout@v2
      with:
        repository: KhronosGroup/OpenCL-Headers
        path: external/OpenCL-Headers

    - name: Checkout OpenCL-ICD-Loader
      uses: actions/checkout@v2
      with:
        repository: KhronosGroup/OpenCL-ICD-Loader
        path: external/OpenCL-ICD-Loader

    - name: Build & install OpenCL-Headers
      shell: bash
      run: |
        $CMAKE_EXE \
          -G "${{matrix.GEN}}" \
          `if [[ "${{matrix.GEN}}" == "Unix Makefiles" ]]; then echo -D CMAKE_BUILD_TYPE=${{matrix.CONFIG}}; fi;` \
          -D CMAKE_C_FLAGS="-w -m${{matrix.BIN}}" \
          -D CMAKE_C_COMPILER=${{matrix.C_COMPILER}} \
          -D CMAKE_C_EXTENSIONS=OFF \
          -D CMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/external/OpenCL-Headers/install \
          -B$GITHUB_WORKSPACE/external/OpenCL-Headers/build \
          -H$GITHUB_WORKSPACE/external/OpenCL-Headers ;
        $CMAKE_EXE \
          --build $GITHUB_WORKSPACE/external/OpenCL-Headers/build \
          `if [[ "${{matrix.GEN}}" == "Ninja Multi-Config" ]]; then echo --config Release; fi;` \
          --target install \
          -- \
          -j`nproc`

    - name: Build & install OpenCL-ICD-Loader
      shell: bash
      run: |
        $CMAKE_EXE \
          -G "${{matrix.GEN}}" \
          `if [[ "${{matrix.GEN}}" == "Unix Makefiles" ]]; then echo -D CMAKE_BUILD_TYPE=${{matrix.CONFIG}}; fi;` \
          -D CMAKE_C_FLAGS="-w -m${{matrix.BIN}}" \
          -D CMAKE_C_COMPILER=${{matrix.C_COMPILER}} \
          -D CMAKE_C_EXTENSIONS=OFF \
          -D CMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/external/OpenCL-Headers/install \
          -D CMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/external/OpenCL-ICD-Loader/install \
          -B$GITHUB_WORKSPACE/external/OpenCL-ICD-Loader/build \
          -H$GITHUB_WORKSPACE/external/OpenCL-ICD-Loader ;
        $CMAKE_EXE \
          --build $GITHUB_WORKSPACE/external/OpenCL-ICD-Loader/build \
          `if [[ "${{matrix.GEN}}" == "Ninja Multi-Config" ]]; then echo --config Release; fi;` \
          --target install \
          -- \
          -j`nproc`

    - name: Configure
      shell: bash
      run: $CMAKE_EXE
        -G "${{matrix.GEN}}"
        -D OPENCL_LAYERS_BUILD_TESTING=ON
        -D BUILD_TESTING=ON
        `if [[ "${{matrix.GEN}}" == "Unix Makefiles" ]]; then echo -D CMAKE_BUILD_TYPE=${{matrix.CONFIG}}; fi;`
        -D CMAKE_C_FLAGS="-Wall -Wextra -pedantic -Werror -m${{matrix.BIN}}"
        -D CMAKE_C_COMPILER=${{matrix.C_COMPILER}}
        -D CMAKE_C_EXTENSIONS=OFF
        -D CMAKE_CXX_FLAGS="-Wall -Wextra -pedantic -Werror -m${{matrix.BIN}}"
        -D CMAKE_CXX_COMPILER=${{matrix.CXX_COMPILER}}
        -D CMAKE_CXX_EXTENSIONS=OFF
        -D CMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install
        -D CMAKE_PREFIX_PATH="$GITHUB_WORKSPACE/external/OpenCL-Headers/install;$GITHUB_WORKSPACE/external/OpenCL-ICD-Loader/install"
        -B$GITHUB_WORKSPACE/build
        -H$GITHUB_WORKSPACE

    - name: Build
      shell: bash
      run: if [[ "${{matrix.GEN}}" == "Unix Makefiles" ]];
        then
          $CMAKE_EXE --build $GITHUB_WORKSPACE/build -- -j`nproc`;
        else
          $CMAKE_EXE --build $GITHUB_WORKSPACE/build --config Debug   -- -j`nproc`;
          $CMAKE_EXE --build $GITHUB_WORKSPACE/build --config Release -- -j`nproc`;
        fi;

    - name: Test
      shell: bash
      working-directory: ${{runner.workspace}}/OpenCL-Layers/build
      run: if [[ "${{matrix.GEN}}" == "Unix Makefiles" ]];
        then
          $CTEST_EXE --output-on-failure --parallel `nproc`;
        else
          $CTEST_EXE --output-on-failure -C Debug   --parallel `nproc`;
          $CTEST_EXE --output-on-failure -C Release --parallel `nproc`;
        fi;