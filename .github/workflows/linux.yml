name: Linux

on: [push, pull_request]

jobs:
  compatibility:
    if: false
    runs-on: ubuntu-latest
    strategy:
      matrix:
        CMAKE: [3.26.4]
        COMPILER:
          - C_COMPILER: gcc-11
            CXX_COMPILER: g++-11
          - C_COMPILER: gcc-13
            CXX_COMPILER: g++-13
          - C_COMPILER: clang-14
            CXX_COMPILER: clang++-14
          - C_COMPILER: clang-16
            CXX_COMPILER: clang++-16
        BIN: [64, 32]
        DEPS: [system, fetch, vcpkg]
        CONF:
          - GEN: Unix Makefiles
            CONFIG: Debug
          - GEN: Unix Makefiles
            CONFIG: Release
          - GEN: Ninja Multi-Config
            CONFIG: Release
        IMAGE:
          - streamhpc/opencl-sdk-intelcpu:ubuntu-22.04-20230717
        include:
          - CMAKE: 3.10.3
            COMPILER:
              C_COMPILER: gcc-9
              CXX_COMPILER: g++-9
            BIN: 64
            DEPS: system
            CONF:
              GEN: Unix Makefiles
              CONFIG: Debug
            IMAGE: streamhpc/opencl-sdk-intelcpu:ubuntu-20.04-20230717
          - CMAKE: 3.10.3
            COMPILER:
              C_COMPILER: gcc-9
              CXX_COMPILER: g++-9
            BIN: 64
            DEPS: system
            CONF:
              GEN: Unix Makefiles
              CONFIG: Release
            IMAGE: streamhpc/opencl-sdk-intelcpu:ubuntu-20.04-20230717
          - CMAKE: 3.10.3
            COMPILER:
              C_COMPILER: gcc-11
              CXX_COMPILER: g++-11
            BIN: 64
            DEPS: system
            CONF:
              GEN: Unix Makefiles
              CONFIG: Debug
            IMAGE: streamhpc/opencl-sdk-intelcpu:ubuntu-22.04-20230717
          - CMAKE: 3.10.3
            COMPILER:
              C_COMPILER: gcc-11
              CXX_COMPILER: g++-11
            BIN: 64
            DEPS: system
            CONF:
              GEN: Unix Makefiles
              CONFIG: Release
            IMAGE: streamhpc/opencl-sdk-intelcpu:ubuntu-22.04-20230717
        exclude:
          - BIN: 32
            DEPS: system
    container: ${{matrix.IMAGE}}
    env:
      CMAKE_EXE: /opt/Kitware/CMake/${{ matrix.CMAKE }}/bin/cmake
      CTEST_EXE: /opt/Kitware/CMake/${{ matrix.CMAKE }}/bin/ctest

    steps:
    - name: Install prerequisites
      shell: bash
      run: |
        if [[ "${{matrix.DEPS}}" == "system" ]]; then
          apt-get update -qq && apt-get install -y \
          libboost-atomic-dev \
          libboost-chrono-dev \
          libboost-date-time-dev \
          libboost-thread-dev \
          libboost-wave-dev \
          libgtest-dev \
          librapidxml-dev
        elif [[ "${{matrix.DEPS}}" == "vcpkg" ]]; then
          export VCPKG_TRIPLET=`if [[ "${{matrix.BIN}}" == "32" ]]; then echo x86-linux; else echo x64-linux; fi;`
          /opt/Microsoft/vcpkg/bootstrap-vcpkg.sh && \
          /opt/Microsoft/vcpkg/vcpkg install \
            boost-wave:$VCPKG_TRIPLET \
            gtest:$VCPKG_TRIPLET \
            rapidxml:$VCPKG_TRIPLET
        fi

    - name: Checkout OpenCL-Layers
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Checkout OpenCL-Headers
      uses: actions/checkout@v3
      with:
        repository: KhronosGroup/OpenCL-Headers
        path: external/OpenCL-Headers

    - name: Checkout OpenCL-CLHPP
      uses: actions/checkout@v3
      with:
        repository: KhronosGroup/OpenCL-CLHPP
        path: external/OpenCL-CLHPP

    - name: Checkout OpenCL-ICD-Loader
      uses: actions/checkout@v3
      with:
        repository: KhronosGroup/OpenCL-ICD-Loader
        path: external/OpenCL-ICD-Loader

    - name: Build & install OpenCL-Headers
      shell: bash
      run: mkdir external/OpenCL-Headers/build && cd external/OpenCL-Headers/build &&
        $CMAKE_EXE
          -G "${{matrix.CONF.GEN}}"
          -D CMAKE_BUILD_TYPE=${{matrix.CONF.CONFIG}}
          -D BUILD_TESTING=OFF
          -D CMAKE_C_FLAGS="-w -m${{matrix.BIN}}"
          -D CMAKE_C_COMPILER=${{matrix.COMPILER.C_COMPILER}}
          -D CMAKE_C_EXTENSIONS=OFF
          -D CMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/external/OpenCL-Headers/install
          .. &&
        $CMAKE_EXE
          --build $GITHUB_WORKSPACE/external/OpenCL-Headers/build
          --target install
          --
          -j`nproc`

    - name: Build & install OpenCL-CLHPP
      shell: bash
      run: mkdir external/OpenCL-CLHPP/build && cd external/OpenCL-CLHPP/build &&
        $CMAKE_EXE
          -G "${{matrix.CONF.GEN}}"
          -D CMAKE_BUILD_TYPE=${{matrix.CONF.CONFIG}}
          -D BUILD_TESTING=OFF
          -D BUILD_DOCS=OFF
          -D BUILD_EXAMPLES=OFF
          -D OPENCL_CLHPP_BUILD_TESTING=OFF
          -D CMAKE_CXX_FLAGS="-w -m${{matrix.BIN}}"
          -D CMAKE_CXX_COMPILER=${{matrix.COMPILER.CXX_COMPILER}}
          -D CMAKE_CXX_EXTENSIONS=OFF
          -D CMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/external/OpenCL-CLHPP/install
          -D CMAKE_PREFIX_PATH="$GITHUB_WORKSPACE/external/OpenCL-Headers/install"
          .. &&
        $CMAKE_EXE
          --build $GITHUB_WORKSPACE/external/OpenCL-CLHPP/build
          --target install
          --
          -j`nproc`

    - name: Build & install OpenCL-ICD-Loader
      shell: bash
      run: mkdir external/OpenCL-ICD-Loader/build && cd external/OpenCL-ICD-Loader/build &&
        $CMAKE_EXE
          -G "${{matrix.CONF.GEN}}"
          -D CMAKE_BUILD_TYPE=${{matrix.CONF.CONFIG}}
          -D BUILD_TESTING=OFF
          -D CMAKE_C_FLAGS="-w -m${{matrix.BIN}}"
          -D CMAKE_C_COMPILER=${{matrix.COMPILER.C_COMPILER}}
          -D CMAKE_C_EXTENSIONS=OFF
          -D CMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/external/OpenCL-Headers/install
          -D CMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/external/OpenCL-ICD-Loader/install
          .. &&
        $CMAKE_EXE
          --build $GITHUB_WORKSPACE/external/OpenCL-ICD-Loader/build
          --target install
          --
          -j`nproc`

    - name: Configure
      shell: bash
      run: export CFLAGS="-Wall -Wextra -pedantic -m${{matrix.BIN}} `if [[ "${{matrix.DEPS}}" != "fetch" ]]; then echo -Werror; fi`" &&
        export CXXFLAGS="-Wall -Wextra -pedantic -m${{matrix.BIN}} `if [[ "${{matrix.DEPS}}" != "fetch" ]]; then echo -Werror; fi`" &&
        export VCPKG_TRIPLET=`if [[ "${{matrix.BIN}}" == "32" ]]; then echo x86-linux; else echo x64-linux; fi;` &&
        mkdir $GITHUB_WORKSPACE/build && cd $GITHUB_WORKSPACE/build && $CMAKE_EXE
        -G "${{matrix.CONF.GEN}}"
        -D OPENCL_LAYERS_BUILD_TESTING=ON
        -D BUILD_TESTING=ON
        -D CMAKE_BUILD_TYPE=${{matrix.CONF.CONFIG}}
        -D CMAKE_C_COMPILER=${{matrix.COMPILER.C_COMPILER}}
        -D CMAKE_C_EXTENSIONS=OFF
        -D CMAKE_CXX_COMPILER=${{matrix.COMPILER.CXX_COMPILER}}
        -D CMAKE_CXX_EXTENSIONS=OFF
        -D CMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install
        -D CMAKE_PREFIX_PATH="$GITHUB_WORKSPACE/external/OpenCL-Headers/install;$GITHUB_WORKSPACE/external/OpenCL-ICD-Loader/install;$GITHUB_WORKSPACE/external/OpenCL-CLHPP/install"
        `if [[ "${{matrix.DEPS}}" == "vcpkg" ]]; then echo "-D CMAKE_TOOLCHAIN_FILE=/opt/Microsoft/vcpkg/scripts/buildsystems/vcpkg.cmake"; fi;`
        `if [[ "${{matrix.DEPS}}" == "vcpkg" ]]; then echo "-D VCPKG_TARGET_TRIPLET=$VCPKG_TRIPLET"; fi;`
        ..

    - name: Build
      shell: bash
      run: if [[ "${{matrix.CONF.GEN}}" == "Unix Makefiles" ]];
        then
          $CMAKE_EXE --build $GITHUB_WORKSPACE/build -- -j`nproc`;
        else
          $CMAKE_EXE --build $GITHUB_WORKSPACE/build --config Debug   -- -j`nproc`;
          $CMAKE_EXE --build $GITHUB_WORKSPACE/build --config Release -- -j`nproc`;
        fi;

    - name: Test
      shell: bash
      working-directory: ${{runner.workspace}}/OpenCL-Layers/build
      run: |
        export EXCLUDED_TESTS=`if [[ "${{matrix.BIN}}" == "32" ]]; then echo "ProgramCache.*Test"; fi;`
        if [[ "${{matrix.CONF.GEN}}" == "Unix Makefiles" ]];
        then
          $CTEST_EXE --output-on-failure --parallel `nproc` --exclude-regex "$EXCLUDED_TESTS";
        else
          $CTEST_EXE --output-on-failure -C Debug   --parallel `nproc` --exclude-regex "$EXCLUDED_TESTS";
          $CTEST_EXE --output-on-failure -C Release --parallel `nproc` --exclude-regex "$EXCLUDED_TESTS";
        fi;

    - name: Install
      shell: bash
      run: $CMAKE_EXE --build $GITHUB_WORKSPACE/build --target install --config ${{matrix.CONF.CONFIG}}

    - name: Configure package test
      shell: bash
      run: mkdir $GITHUB_WORKSPACE/program-cache/lib/test/package/build && cd $GITHUB_WORKSPACE/program-cache/lib/test/package/build &&
        $CMAKE_EXE
        -G "${{matrix.CONF.GEN}}"
        -D CMAKE_BUILD_TYPE=${{matrix.CONF.CONFIG}}
        -D CMAKE_C_FLAGS="-m${{matrix.BIN}}"
        -D CMAKE_C_COMPILER=${{matrix.COMPILER.C_COMPILER}}
        -D CMAKE_C_EXTENSIONS=OFF
        -D CMAKE_CXX_FLAGS="-m${{matrix.BIN}}"
        -D CMAKE_CXX_COMPILER=${{matrix.COMPILER.CXX_COMPILER}}
        -D CMAKE_CXX_EXTENSIONS=OFF        
        -D CMAKE_PREFIX_PATH="$GITHUB_WORKSPACE/external/OpenCL-Headers/install;$GITHUB_WORKSPACE/external/OpenCL-ICD-Loader/install;$GITHUB_WORKSPACE/external/OpenCL-CLHPP/install;$GITHUB_WORKSPACE/install"
        ..

    - name: Build package test
      shell: bash
      run: if [[ "${{matrix.CONF.GEN}}" == "Unix Makefiles" ]];
        then
          $CMAKE_EXE --build $GITHUB_WORKSPACE/program-cache/lib/test/package/build -- -j`nproc`;
        else
          $CMAKE_EXE --build $GITHUB_WORKSPACE/program-cache/lib/test/package/build --config Debug   -- -j`nproc`;
          $CMAKE_EXE --build $GITHUB_WORKSPACE/program-cache/lib/test/package/build --config Release -- -j`nproc`;
        fi;

    - name: Run package test
      if: matrix.BIN != 32
      shell: bash
      working-directory: ${{runner.workspace}}/OpenCL-Layers/program-cache/lib/test/package/build
      run: |
        if [[ "${{matrix.CONF.GEN}}" == "Unix Makefiles" ]];
        then
          $CTEST_EXE --output-on-failure --parallel `nproc`
        else
          $CTEST_EXE --output-on-failure -C Debug   --parallel `nproc`
          $CTEST_EXE --output-on-failure -C Release --parallel `nproc`
        fi; 
