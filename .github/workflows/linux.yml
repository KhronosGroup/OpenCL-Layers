name: Linux

on: [push, pull_request]

jobs:
  cmake-minimum:
    runs-on: ${{ matrix.OS }}
    strategy:
      matrix:
        OS: [ubuntu-18.04]
        VER: [7, 8]
        EXT: [OFF]
        GEN: [Unix Makefiles]
        CONFIG: [Debug, Release]
        BIN: [64, 32]
        CMAKE: [3.8.2]
    env:
      CMAKE_URL: https://github.com/Kitware/CMake/releases/download/v${{ matrix.CMAKE }}/cmake-${{ matrix.CMAKE }}-Linux-x86_64.tar.gz
      CMAKE_EXE: /opt/Kitware/CMake/${{ matrix.CMAKE }}/bin/cmake
      CTEST_EXE: /opt/Kitware/CMake/${{ matrix.CMAKE }}/bin/ctest


    steps:
    - name: Checkout OpenCL-Layers
      uses: actions/checkout@v2

    - name: Checkout OpenCL-Headers
      uses: actions/checkout@v2
      with:
        repository: StreamHPC/OpenCL-Headers
        ref: develop_stream
        path: external/OpenCL-Headers

    - name: Checkout OpenCL-ICD-Loader
      uses: actions/checkout@v2
      with:
        repository: StreamHPC/OpenCL-ICD-Loader
        ref: develop_stream
        path: external/OpenCL-ICD-Loader
      # Temporary redirection to external repo. Changes needed from there.

    - name: Create Build Environment
      run: sudo apt-get update -q;
        if [[ "${{matrix.GEN}}" =~ "Ninja" && ! `which ninja` ]]; then sudo apt install -y ninja-build; fi;
        sudo apt install gcc-${{matrix.VER}} g++-${{matrix.VER}}; 
        if [[ "${{matrix.BIN}}" == "32" ]];
        then sudo apt install gcc-${{matrix.VER}-multilib;
        fi;
        mkdir -p /opt/Kitware/CMake;
        wget -c $CMAKE_URL -O - | tar -xz --directory /opt/Kitware/CMake;
        mv /opt/Kitware/CMake/cmake-${{ matrix.CMAKE }}-* /opt/Kitware/CMake/${{ matrix.CMAKE }}
      # Install Ninja only if it's the selected generator and it's not available.

    - name: Build & install OpenCL-Headers
      run: $CMAKE_EXE
        -G "${{matrix.GEN}}"
        -D CMAKE_BUILD_TYPE=${{matrix.CONFIG}}
        -D CMAKE_C_FLAGS="-w -m${{matrix.BIN}}"
        -D CMAKE_C_COMPILER=gcc-${{matrix.VER}}
        -D CMAKE_C_EXTENSIONS=${{matrix.EXT}}
        -D CMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/external/OpenCL-Headers/install
        -B$GITHUB_WORKSPACE/external/OpenCL-Headers/build
        -H$GITHUB_WORKSPACE/external/OpenCL-Headers &&
        $CMAKE_EXE
        --build $GITHUB_WORKSPACE/external/OpenCL-Headers/build
        --target install
        --
        -j`nproc`

    - name: Build & install OpenCL-ICD-Loader
      run: $CMAKE_EXE
        -G "${{matrix.GEN}}"
        -D CMAKE_BUILD_TYPE=${{matrix.CONFIG}}
        -D CMAKE_C_FLAGS="-w -m${{matrix.BIN}}"
        -D CMAKE_C_COMPILER=gcc-${{matrix.VER}}
        -D CMAKE_C_EXTENSIONS=${{matrix.EXT}}
        -D CMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/external/OpenCL-Headers/install
        -D CMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/external/OpenCL-ICD-Loader/install
        -B$GITHUB_WORKSPACE/external/OpenCL-ICD-Loader/build
        -H$GITHUB_WORKSPACE/external/OpenCL-ICD-Loader &&
        $CMAKE_EXE
        --build $GITHUB_WORKSPACE/external/OpenCL-ICD-Loader/build
        --target install
        --
        -j`nproc`

    - name: Configure
      shell: bash
      # no -Werror during configuration because:
      # warning: ISO C forbids assignment between function pointer and ‘void *’ [-Wpedantic]
      # warning: unused parameter [-Wunused-parameter]
      run:
        $CMAKE_EXE
        -G "${{matrix.GEN}}"
        -D BUILD_TESTING=ON
        -D BUILD_EXAMPLES=ON
        -D CMAKE_BUILD_TYPE=${{matrix.CONFIG}}
        -D CMAKE_C_FLAGS="-Wall -Wextra -pedantic -Werror -m${{matrix.BIN}}"
        -D CMAKE_C_COMPILER=gcc-${{matrix.VER}}
        -D CMAKE_C_EXTENSIONS=${{matrix.EXT}}
        -D CMAKE_CXX_FLAGS="-Wall -Wextra -pedantic -Werror -m${{matrix.BIN}}"
        -D CMAKE_CXX_COMPILER=g++-${{matrix.VER}}
        -D CMAKE_CXX_EXTENSIONS=${{matrix.EXT}}
        -D CMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install
        -D CMAKE_PREFIX_PATH="$GITHUB_WORKSPACE/external/OpenCL-Headers/install;$GITHUB_WORKSPACE/external/OpenCL-ICD-Loader/install"
        -B$GITHUB_WORKSPACE/build
        -H$GITHUB_WORKSPACE

    - name: Build
      shell: bash
      run: $CMAKE_EXE
        --build $GITHUB_WORKSPACE/build
        --
        -j`nproc`





  cmake-latest:
    runs-on: ${{ matrix.OS }}
    strategy:
      matrix:
        OS : [ubuntu-20.04]
        VER: [9, 11] # clang-11, clang-13
        EXT: [OFF]
        GEN: [Ninja Multi-Config]
        BIN: [64, 32]
        CMAKE: [3.22.1]
    env:
      CMAKE_URL: https://github.com/Kitware/CMake/releases/download/v${{ matrix.CMAKE }}/cmake-${{ matrix.CMAKE }}-Linux-x86_64.tar.gz
      CMAKE_EXE: /opt/Kitware/CMake/${{ matrix.CMAKE }}/bin/cmake
      CTEST_EXE: /opt/Kitware/CMake/${{ matrix.CMAKE }}/bin/ctest


    steps:
    - name: Checkout OpenCL-Layers
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Checkout OpenCL-Headers
      uses: actions/checkout@v2
      with:
        repository: KhronosGroup/OpenCL-Headers
        path: external/OpenCL-Headers

    - name: Checkout OpenCL-ICD-Loader
      uses: actions/checkout@v2
      with:
        repository: StreamHPC/OpenCL-ICD-Loader
        ref: develop_stream
        path: external/OpenCL-ICD-Loader
      # Temporary redirection to external repo. Changes needed from there.

    - name: Create Build Environment
      run: sudo apt-get update -q;
        if [[ "${{matrix.GEN}}" =~ "Ninja" && ! `which ninja` ]]; then sudo apt install -y ninja-build; fi;
        sudo apt install gcc-${{matrix.VER}} g++-${{matrix.VER}}; 
        if [[ "${{matrix.BIN}}" == "32" ]];
        then sudo apt install gcc-${{matrix.VER}}-multilib;
        fi;
        mkdir -p /opt/Kitware/CMake;
        wget -c $CMAKE_URL -O - | tar -xz --directory /opt/Kitware/CMake;
        mv /opt/Kitware/CMake/cmake-${{ matrix.CMAKE }}-* /opt/Kitware/CMake/${{ matrix.CMAKE }}
      # Install Ninja only if it's the selected generator and it's not available.

    - name: Build & install OpenCL-Headers
      run: $CMAKE_EXE
        -G "${{matrix.GEN}}"
        -D CMAKE_C_FLAGS="-w -m${{matrix.BIN}}"
        -D CMAKE_C_COMPILER=gcc-${{matrix.VER}}
        -D CMAKE_C_EXTENSIONS=${{matrix.EXT}}
        -D CMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/external/OpenCL-Headers/install
        -B$GITHUB_WORKSPACE/external/OpenCL-Headers/build
        -H$GITHUB_WORKSPACE/external/OpenCL-Headers &&
        $CMAKE_EXE
        --build $GITHUB_WORKSPACE/external/OpenCL-Headers/build
        --target install
        --config Release
        --
        -j`nproc`

    - name: Build & install OpenCL-ICD-Loader
      run: $CMAKE_EXE
        -G "${{matrix.GEN}}"
        -D CMAKE_C_FLAGS="-w -m${{matrix.BIN}}"
        -D CMAKE_C_COMPILER=gcc-${{matrix.VER}}
        -D CMAKE_C_EXTENSIONS=${{matrix.EXT}}
        -D CMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/external/OpenCL-Headers/install
        -D CMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/external/OpenCL-ICD-Loader/install
        -B$GITHUB_WORKSPACE/external/OpenCL-ICD-Loader/build
        -H$GITHUB_WORKSPACE/external/OpenCL-ICD-Loader &&
        $CMAKE_EXE
        --build $GITHUB_WORKSPACE/external/OpenCL-ICD-Loader/build
        --target install
        --config Release
        --
        -j`nproc`

    - name: Configure
      shell: bash
      # no -Werror during configuration because:
      # warning: ISO C forbids assignment between function pointer and ‘void *’ [-Wpedantic]
      # warning: unused parameter [-Wunused-parameter]
      run: $CMAKE_EXE
        -G "${{matrix.GEN}}"
        -D BUILD_TESTING=ON
        -D BUILD_EXAMPLES=ON
        -D CMAKE_C_FLAGS="-Wall -Wextra -pedantic -Werror -m${{matrix.BIN}}"
        -D CMAKE_C_COMPILER=gcc-${{matrix.VER}}
        -D CMAKE_C_EXTENSIONS=${{matrix.EXT}}
        -D CMAKE_CXX_FLAGS="-Wall -Wextra -pedantic -Werror -m${{matrix.BIN}}"
        -D CMAKE_CXX_COMPILER=g++-${{matrix.VER}}
        -D CMAKE_CXX_EXTENSIONS=${{matrix.EXT}}
        -D CMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install
        -D CMAKE_PREFIX_PATH="$GITHUB_WORKSPACE/external/OpenCL-Headers/install;$GITHUB_WORKSPACE/external/OpenCL-ICD-Loader/install"
        -B$GITHUB_WORKSPACE/build
        -H$GITHUB_WORKSPACE

    - name: Build
      shell: bash
      run: |
        $CMAKE_EXE --build $GITHUB_WORKSPACE/build --config Release -- -j`nproc`;
        $CMAKE_EXE --build $GITHUB_WORKSPACE/build --config Debug   -- -j`nproc`
