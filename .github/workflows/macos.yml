name: MacOS

on: [push, pull_request]

jobs:
  compatibility:
    runs-on: macos-13
    strategy:
      matrix:
        include:
        - CONF: 
            GEN: Xcode
            C_COMPILER: /usr/bin/gcc
            CXX_COMPILER: /usr/bin/g++
          DEPS: system
        - CONF: 
            GEN: Xcode
            C_COMPILER: /usr/bin/gcc
            CXX_COMPILER: /usr/bin/g++
          DEPS: vcpkg
        - CONF: 
            GEN: Xcode
            C_COMPILER: /usr/bin/gcc
            CXX_COMPILER: /usr/bin/g++
          DEPS: fetch
        - CONF: 
            GEN: Ninja Multi-Config
            C_COMPILER: /usr/local/bin/gcc-11
            CXX_COMPILER: /usr/local/bin/g++-11
          DEPS: fetch
        - CONF: 
            GEN: Ninja Multi-Config
            C_COMPILER: /usr/local/bin/gcc-13
            CXX_COMPILER: /usr/local/bin/g++-13
          DEPS: fetch
        - CONF: 
            GEN: Ninja Multi-Config
            C_COMPILER: /usr/local/bin/gcc-11
            CXX_COMPILER: /usr/local/bin/g++-11
          DEPS: vcpkg
        - CONF: 
            GEN: Ninja Multi-Config
            C_COMPILER: /usr/local/bin/gcc-13
            CXX_COMPILER: /usr/local/bin/g++-13
          DEPS: vcpkg
    steps:
    - name: Checkout OpenCL-Layers
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Checkout OpenCL-Headers
      uses: actions/checkout@v3
      with:
        repository: KhronosGroup/OpenCL-Headers
        path: external/OpenCL-Headers

    - name: Checkout OpenCL-CLHPP
      uses: actions/checkout@v3
      with:
        repository: KhronosGroup/OpenCL-CLHPP
        path: external/OpenCL-CLHPP

    - name: Checkout OpenCL-ICD-Loader
      uses: actions/checkout@v3
      with:
        repository: KhronosGroup/OpenCL-ICD-Loader
        path: external/OpenCL-ICD-Loader

    - name: Create Build Environment
      shell: bash
      run: |
        cmake -E make_directory $GITHUB_WORKSPACE/build;
        cmake -E make_directory $GITHUB_WORKSPACE/install;
        if [[ "${{matrix.CONF.GEN}}" == "Ninja Multi-Config" && ! `which ninja` ]]; then brew install ninja; fi;
        # Install Ninja only if it's the selected generator and it's not available.
        if [[ "${{matrix.DEPS}}" == "vcpkg" && ! `which pkg-config` ]]; then brew install pkg-config; fi;
        cmake --version

    - name: Install dependencies with Homebrew
      if: matrix.DEPS == 'system'
      shell: bash
      run: brew install boost googletest

    - name: Cache vcpkg install
      if: matrix.DEPS == 'vcpkg'
      id: vcpkg-install
      uses: actions/cache@v3
      with:
        path: /usr/local/share/vcpkg
        key: vcpkg-macos-${{matrix.CONF.CXX_COMPILER}}

    - name: Install dependencies with vcpkg
      if: matrix.DEPS == 'vcpkg' && steps.vcpkg-install.outputs.cache-hit != 'true'
      shell: bash
      # Important: the same compiler must be used with vcpkg as with the project build
      # because apple-clang uses a different standard library implementation from GCC
      run: CC=${{matrix.CONF.C_COMPILER}}
        CXX=${{matrix.CONF.CXX_COMPILER}}
        $VCPKG_INSTALLATION_ROOT/vcpkg install boost-wave gtest rapidxml

    - name: Build & install OpenCL-Headers
      shell: bash
      run: |
        cmake \
          -G "${{matrix.CONF.GEN}}" \
          -D BUILD_TESTING=OFF \
          -D CMAKE_C_FLAGS="-w" \
          -D CMAKE_C_COMPILER=${{matrix.CONF.C_COMPILER}} \
          -D CMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/external/OpenCL-Headers/install \
          -S $GITHUB_WORKSPACE/external/OpenCL-Headers \
          -B $GITHUB_WORKSPACE/external/OpenCL-Headers/build
        cmake \
          --build $GITHUB_WORKSPACE/external/OpenCL-Headers/build \
          --target install \
          --config Release \
          --parallel `sysctl -n hw.logicalcpu` \
          `if [[ "${{matrix.CONF.GEN}}" == "Xcode" ]]; then echo "-- -quiet"; fi;`

    - name: Build & install OpenCL-CLHPP
      shell: bash
      run: |
        cmake \
          -G "${{matrix.CONF.GEN}}" \
          -D BUILD_TESTING=OFF \
          -D BUILD_DOCS=OFF \
          -D BUILD_EXAMPLES=OFF \
          -D OPENCL_CLHPP_BUILD_TESTING=OFF \
          -D CMAKE_C_FLAGS="-w" \
          -D CMAKE_C_COMPILER=${{matrix.CONF.C_COMPILER}} \
          -D CMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/external/OpenCL-CLHPP/install \
          -D CMAKE_PREFIX_PATH="$GITHUB_WORKSPACE/external/OpenCL-Headers/install" \
          -S $GITHUB_WORKSPACE/external/OpenCL-CLHPP \
          -B $GITHUB_WORKSPACE/external/OpenCL-CLHPP/build
        cmake \
          --build $GITHUB_WORKSPACE/external/OpenCL-CLHPP/build \
          --target install \
          --config Release \
          --parallel `sysctl -n hw.logicalcpu` \
          `if [[ "${{matrix.CONF.GEN}}" == "Xcode" ]]; then echo "-- -quiet"; fi;`

    - name: Build & install OpenCL-ICD-Loader
      shell: bash
      run: |
        cmake \
          -G "${{matrix.CONF.GEN}}" \
          -D BUILD_TESTING=OFF \
          -D CMAKE_C_FLAGS="-w -m64" \
          -D CMAKE_C_COMPILER=${{matrix.CONF.C_COMPILER}} \
          -D CMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/external/OpenCL-Headers/install \
          -D CMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/external/OpenCL-ICD-Loader/install \
          -S $GITHUB_WORKSPACE/external/OpenCL-ICD-Loader \
          -B $GITHUB_WORKSPACE/external/OpenCL-ICD-Loader/build
        cmake \
          --build $GITHUB_WORKSPACE/external/OpenCL-ICD-Loader/build \
          --target install \
          --config Release \
          --parallel `sysctl -n hw.logicalcpu`

    - name: Configure CMake
      shell: bash
      run: export FLAGS=`if [[ "${{matrix.DEPS}}" == "fetch" ]]; then echo "-Wall -Wextra -pedantic -Wno-format -m64"; else echo "-Wall -Wextra -pedantic -Wno-format -m64 -Werror"; fi` ;
        cmake
        -G "${{matrix.CONF.GEN}}"
        -D OPENCL_LAYERS_BUILD_TESTING=ON
        -D BUILD_TESTING=ON
        -D CMAKE_CXX_FLAGS="$FLAGS"
        -D CMAKE_CXX_COMPILER=/${{matrix.CONF.CXX_COMPILER}}
        -D CMAKE_CXX_EXTENSIONS=OFF
        -D CMAKE_CXX_STANDARD=14
        -D CMAKE_C_FLAGS="$FLAGS"
        -D CMAKE_C_COMPILER=${{matrix.CONF.C_COMPILER}}
        -D CMAKE_C_EXTENSIONS=OFF
        -D CMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install
        -D CMAKE_PREFIX_PATH="$GITHUB_WORKSPACE/external/OpenCL-Headers/install;$GITHUB_WORKSPACE/external/OpenCL-ICD-Loader/install;$GITHUB_WORKSPACE/external/OpenCL-CLHPP/install"
        -D CMAKE_FIND_PACKAGE_PREFER_CONFIG=ON
        -D CMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake
        -S $GITHUB_WORKSPACE
        -B $GITHUB_WORKSPACE/build

    - name: Build
      shell: bash
      run: |
        cmake --build $GITHUB_WORKSPACE/build --config Release --parallel `sysctl -n hw.logicalcpu` `if [[ "${{matrix.CONF.GEN}}" == "Xcode" ]]; then echo "-- -quiet"; fi;`
        cmake --build $GITHUB_WORKSPACE/build --config Debug   --parallel `sysctl -n hw.logicalcpu` `if [[ "${{matrix.CONF.GEN}}" == "Xcode" ]]; then echo "-- -quiet"; fi;`

    - name: Test
      if: false
      working-directory: ${{runner.workspace}}/OpenCL-Layers/build
      shell: bash
      run: |
        ctest -C Release --output-on-failure --parallel `sysctl -n hw.logicalcpu`
        ctest -C Debug --output-on-failure --parallel `sysctl -n hw.logicalcpu`

    - name: Install
      shell: bash
      run: cmake --build $GITHUB_WORKSPACE/build --target install --config Release

    - name: Configure package test
      shell: bash
      run: export FLAGS=`if [[ "${{matrix.DEPS}}" == "fetch" ]]; then echo "-Wall -Wextra -pedantic -Wno-format -m64"; else echo "-Wall -Wextra -pedantic -Wno-format -m64 -Werror"; fi` ;
        cmake
        -G "${{matrix.CONF.GEN}}"
        -D CMAKE_CXX_FLAGS="$FLAGS"
        -D CMAKE_CXX_COMPILER=${{matrix.CONF.CXX_COMPILER}}
        -D CMAKE_CXX_EXTENSIONS=OFF
        -D CMAKE_PREFIX_PATH="$GITHUB_WORKSPACE/external/OpenCL-Headers/install;$GITHUB_WORKSPACE/external/OpenCL-ICD-Loader/install;$GITHUB_WORKSPACE/external/OpenCL-CLHPP/install;$GITHUB_WORKSPACE/install"
        -D CMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake
        -S $GITHUB_WORKSPACE/program-cache/lib/test/package
        -B $GITHUB_WORKSPACE/program-cache/lib/test/package/build

    - name: Build package test
      shell: bash
      run: |
        cmake --build $GITHUB_WORKSPACE/program-cache/lib/test/package/build --config Debug --parallel `sysctl -n hw.logicalcpu` `if [[ "${{matrix.CONF.GEN}}" == "Xcode" ]]; then echo "-- -quiet"; fi;`
        cmake --build $GITHUB_WORKSPACE/program-cache/lib/test/package/build --config Release --parallel `sysctl -n hw.logicalcpu` `if [[ "${{matrix.CONF.GEN}}" == "Xcode" ]]; then echo "-- -quiet"; fi;`
