name: Windows

on: [push, pull_request]

jobs:
  msvc:
    runs-on: windows-2022
    strategy:
      matrix:
        VER: [v141, v142, v143]
        EXT: [OFF]
        GEN: [Visual Studio 17 2022, Ninja Multi-Config]
        BIN: [x64, x86]
        CMAKE: [3.22.0]
    if: ${{ !(${{matrix.GEN}} == 'Ninja Multi-Config' && ${{matrix.VER}} != 'v143') }}
    env:
      NINJA_URL: https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-win.zip
      NINJA_EXE: C:\Tools\Ninja\ninja.exe
      CMAKE_URL: https://github.com/Kitware/CMake/releases/download/v${{matrix.CMAKE}}/cmake-${{matrix.CMAKE}}-windows-x86_64.zip
      CMAKE_EXE: C:\Tools\Kitware\CMake\${{matrix.CMAKE}}\bin\cmake.exe
      CTEST_EXE: C:\Tools\Kitware\CMake\${{matrix.CMAKE}}\bin\ctest.exe
      INTEL_OCL_URL: https://github.com/intel/llvm/releases/download/2021-WW50/win-oclcpuexp-2021.13.11.0.23_rel.zip
      INTEL_TBB_URL: https://github.com/oneapi-src/oneTBB/releases/download/v2021.5.0/oneapi-tbb-2021.5.0-win.zip

    steps:
    - name: Checkout OpenCL-Layers
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Checkout OpenCL-Headers
      uses: actions/checkout@v2
      with:
        repository: KhronosGroup/OpenCL-Headers
        path: external/OpenCL-Headers

    - name: Checkout OpenCL-ICD-Loader
      uses: actions/checkout@v2
      with:
        repository: Kerilk/OpenCL-ICD-Loader
        ref: system-layers
        path: external/OpenCL-ICD-Loader
      # Temporary redirection to external repo. Changes needed from there.

    - name: Cache Ninja install
      id: ninja-install
      uses: actions/cache@v2
      with:
        path: |
          C:\Tools\Ninja
        key: ${{runner.os}}-ninja-${{env.NINJA_URL}}

    - name: Cache CMake install
      id: cmake-install
      uses: actions/cache@v2
      with:
        path: |
          C:\Tools\Kitware\CMake\${{matrix.CMAKE}}
        key: ${{runner.os}}-cmake-${{matrix.CMAKE}}

    #- name: Cache Intel OpenCL CPU install
    #  id: intel-ocl-install
    #  uses: actions/cache@v2
    #  with:
    #    path: |
    #      C:\Tools\Intel
    #    key: ${{runner.os}}-ocl-url-${INTEL_OCL_URL}-tbb-url-${INTEL_TBB_URL}

    - name: Install Ninja
      if: steps.ninja-install.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        Invoke-WebRequest ${env:NINJA_URL} -OutFile ~\Downloads\ninja-win.zip
        Expand-Archive ~\Downloads\ninja-win.zip -DestinationPath C:\Tools\Ninja\
        Remove-Item ~\Downloads\*

    - name: Install CMake
      if: steps.cmake-install.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        Invoke-WebRequest ${env:CMAKE_URL} -OutFile ~\Downloads\cmake-${{matrix.CMAKE}}-windows-x86_64.zip
        Expand-Archive ~\Downloads\cmake-${{matrix.CMAKE}}-windows-x86_64.zip -DestinationPath C:\Tools\Kitware\CMake\
        Rename-Item C:\Tools\Kitware\CMake\* ${{matrix.CMAKE}}
        Remove-Item ~\Downloads\*

    - name: Install Intel OpenCL CPU
      #if: steps.intel-ocl-install.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        Invoke-WebRequest ${env:INTEL_OCL_URL} -OutFile ('~\Downloads\' + (Split-Path ${env:INTEL_OCL_URL} -Leaf))
        Expand-Archive ~\Downloads\*.zip -DestinationPath C:\Tools\Intel\oclcpuexp
        Remove-Item ~\Downloads\*.zip
        Invoke-WebRequest ${env:INTEL_TBB_URL} -OutFile ('~\Downloads\' + (Split-Path ${env:INTEL_TBB_URL} -Leaf))
        Expand-Archive ~\Downloads\*.zip -DestinationPath C:\Tools\Intel
        Get-ChildItem C:\Tools\Intel\oneapi-tbb* | Rename-Item -NewName oneapi-tbb
        Remove-Item ~\Downloads\*.zip
        New-Item -Type Directory C:\Tools\Intel\oclcpuexp\tbb | Out-Null
        Get-ChildItem C:\Tools\Intel\oneapi-tbb\redist\intel64\vc14\*.dll | ForEach-Object { New-Item -Type SymbolicLink -Path C:\Tools\Intel\oclcpuexp\tbb -Name $_.Name -Value $_.FullName | Out-Null }
        [Environment]::SetEnvironmentVariable('Path', ${env:Path} + ';C:\Tools\Intel\oclcpuexp;C:\Tools\Intel\oclcpuexp\tbb', [EnvironmentVariableTarget]::User)
        [Environment]::SetEnvironmentVariable('OCL_ICD_FILENAMES', 'C:\Tools\Intel\oclcpuexp\intelocl64.dll', [EnvironmentVariableTarget]::User)
        [Environment]::SetEnvironmentVariable('Path', ${env:Path} + ';C:\Tools\Intel\oclcpuexp\tbb', [EnvironmentVariableTarget]::Machine)
        New-Item -Type Directory HKLM:\SOFTWARE\Khronos\OpenCL\Vendors -Force | Out-Null
        Set-ItemProperty -Path HKLM:\SOFTWARE\Khronos\OpenCL\Vendors -Name C:\Tools\Intel\oclcpuexp\intelocl64.dll -Type DWord -Value 0

    - name: Create Build Environment
      shell: pwsh
      run: |
        # Parallelize MSBuild across projects
        [Environment]::SetEnvironmentVariable('UseMultiToolTask', 'true', [EnvironmentVariableTarget]::User)
        Get-Item C:\Tools\Intel\oclcpuexp\intelocl64.dll | Select-Object -ExpandProperty VersionInfo
        Get-Item HKLM:\SOFTWARE\Khronos\OpenCL\Vendors
        & ${env:CMAKE_EXE} --version
        & ${env:NINJA_EXE} --version

    - name: Build & install OpenCL-Headers (MSBuild)
      if: matrix.GEN == 'Visual Studio 17 2022'
      shell: pwsh
      run: |
        $BIN = if('${{matrix.BIN}}' -eq 'x86') {'Win32'} else {'x64'}
        $C_FLAGS = '/w'
        & ${env:CMAKE_EXE} `
          -G '${{matrix.GEN}}' `
          -A $BIN `
          -T ${{matrix.VER}} `
          -D BUILD_TESTING=OFF `
          -D CMAKE_C_FLAGS="$C_FLAGS" `
          -D CMAKE_C_EXTENSIONS=${{matrix.EXT}} `
          -D CMAKE_INSTALL_PREFIX="${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install" `
          -S ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers `
          -B ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\build
        & ${env:CMAKE_EXE} `
          --build ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\build `
          --target install `
          --config Release `
          -- `
          /verbosity:minimal `
          /maxCpuCount `
          /noLogo

    - name: Build & install OpenCL-Headers (Ninja Multi-Config)
      if: matrix.GEN == 'Ninja Multi-Config'
      shell: pwsh
      run: |
        $VER = switch ('${{matrix.VER}}') { `
          'v140' {'14.0'} `
          'v141' {'14.1'} `
          'v142' {'14.2'} `
          'v143' {'14.3'} }
        Import-Module 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\Microsoft.VisualStudio.DevShell.dll'
        Enter-VsDevShell -VsInstallPath 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise' -SkipAutomaticLocation -DevCmdArguments '-host_arch=x64 -arch=${{matrix.BIN}} -vcvars_ver=${VER}'
        $C_FLAGS = '/w'
        & ${env:CMAKE_EXE} `
          -G '${{matrix.GEN}}' `
          -D BUILD_TESTING=OFF `
          -D CMAKE_MAKE_PROGRAM="${env:NINJA_EXE}" `
          -D CMAKE_C_FLAGS="${C_FLAGS}" `
          -D CMAKE_C_EXTENSIONS='${{matrix.EXT}}' `
          -D CMAKE_INSTALL_PREFIX="${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install" `
          -S ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers `
          -B ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\build
        & ${env:CMAKE_EXE} `
          --build ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\build `
          --target install `
          --config Release `
          -- `
          -j${env:NUMBER_OF_PROCESSORS}

    - name: Build & install OpenCL-ICD-Loader (MSBuild)
      if: matrix.GEN == 'Visual Studio 17 2022'
      shell: pwsh
      run: |
        $C_FLAGS = '/w'
        $BIN = if('${{matrix.BIN}}' -eq 'x86') {'Win32'} else {'x64'}
        & ${env:CMAKE_EXE} `
          -G '${{matrix.GEN}}' `
          -A $BIN `
          -T ${{matrix.VER}} `
          -D BUILD_TESTING=OFF `
          -D CMAKE_C_FLAGS="$C_FLAGS" `
          -D CMAKE_C_EXTENSIONS=${{matrix.EXT}} `
          -D CMAKE_INSTALL_PREFIX="${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader\install" `
          -D CMAKE_PREFIX_PATH="${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install" `
          -S ${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader `
          -B ${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader\build
        & ${env:CMAKE_EXE} `
          --build ${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader\build `
          --target install `
          --config Release `
          -- `
          /verbosity:minimal `
          /maxCpuCount `
          /noLogo

    - name: Build & install OpenCL-ICD-Loader (Ninja Multi-Config)
      if: matrix.GEN == 'Ninja Multi-Config'
      shell: pwsh
      run: |
        $VER = switch ('${{matrix.VER}}') { `
          'v140' {'14.0'} `
          'v141' {'14.1'} `
          'v142' {'14.2'} `
          'v143' {'14.3'} }
        Import-Module 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\Microsoft.VisualStudio.DevShell.dll'
        Enter-VsDevShell -VsInstallPath 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise' -SkipAutomaticLocation -DevCmdArguments '-host_arch=x64 -arch=${{matrix.BIN}} -vcvars_ver=${VER}'
        $C_FLAGS = '/w'
        & ${env:CMAKE_EXE} `
          -G '${{matrix.GEN}}' `
          -D BUILD_TESTING=OFF `
          -D CMAKE_MAKE_PROGRAM="${env:NINJA_EXE}" `
          -D CMAKE_C_FLAGS="${C_FLAGS}" `
          -D CMAKE_C_EXTENSIONS='${{matrix.EXT}}' `
          -D CMAKE_EXE_LINKER_FLAGS='/INCREMENTAL' `
          -D CMAKE_INSTALL_PREFIX="${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader\install" `
          -D CMAKE_PREFIX_PATH="${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install" `
          -S ${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader `
          -B ${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader\build
        & ${env:CMAKE_EXE} `
          --build ${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader\build `
          --target install `
          --config Release `
          -- `
          -j ${env:NUMBER_OF_PROCESSORS}

    - name: Configure (MSBuild)
      if: matrix.GEN == 'Visual Studio 17 2022'
      shell: pwsh
      run: |
        $BIN = if('${{matrix.BIN}}' -eq 'x86') {'Win32'} else {'x64'}
        $C_FLAGS = '/W4'
        $CXX_FLAGS = '/W4'
        & ${env:CMAKE_EXE} `
          -G '${{matrix.GEN}}' `
          -A $BIN `
          -T ${{matrix.VER}} `
          -D OPENCL_LAYERS_BUILD_TESTING=ON `
          -D BUILD_TESTING=ON `
          -D CMAKE_C_FLAGS="${C_FLAGS}" `
          -D CMAKE_C_EXTENSIONS='${{matrix.EXT}}' `
          -D CMAKE_CXX_FLAGS="${CXX_FLAGS}" `
          -D CMAKE_CXX_EXTENSIONS='${{matrix.EXT}}' `
          -D CMAKE_INSTALL_PREFIX="${env:GITHUB_WORKSPACE}\install" `
          -D CMAKE_PREFIX_PATH="${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install;${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader\install" `
          -S "${env:GITHUB_WORKSPACE}" `
          -B "${env:GITHUB_WORKSPACE}\build"

    - name: Configure (Ninja Multi-Config)
      if: matrix.GEN == 'Ninja Multi-Config'
      shell: pwsh
      run: |
        $VER = switch ('${{matrix.VER}}') { `
          'v140' {'14.0'} `
          'v141' {'14.1'} `
          'v142' {'14.2'} `
          'v143' {'14.3'} }
        Import-Module 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\Microsoft.VisualStudio.DevShell.dll'
        Enter-VsDevShell -VsInstallPath 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise' -SkipAutomaticLocation -DevCmdArguments '-host_arch=x64 -arch=${{matrix.BIN}} -vcvars_ver=${VER}'
        $C_FLAGS = '/w'
        & ${env:CMAKE_EXE} `
          -G '${{matrix.GEN}}' `
          -D CMAKE_MAKE_PROGRAM="${env:NINJA_EXE}" `
          -D OPENCL_LAYERS_BUILD_TESTING=ON `
          -D BUILD_TESTING=ON `
          -D CMAKE_C_FLAGS="${C_FLAGS}"" `
          -D CMAKE_C_EXTENSIONS='${{matrix.EXT}}' `
          -D CMAKE_CXX_FLAGS="${CXX_FLAGS}"" `
          -D CMAKE_CXX_EXTENSIONS='${{matrix.EXT}}'' `
          -D CMAKE_EXE_LINKER_FLAGS='/INCREMENTAL' `
          -D CMAKE_INSTALL_PREFIX="${env:GITHUB_WORKSPACE}\install" `
          -D CMAKE_PREFIX_PATH="${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install;${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader\install" `
          -S "${env:GITHUB_WORKSPACE}" `
          -B "${env:GITHUB_WORKSPACE}\build"

    - name: Build (MSBuild)
      if: matrix.GEN == 'Visual Studio 17 2022'
      shell: pwsh
      run: |
        & ${env:CMAKE_EXE} --build "${env:GITHUB_WORKSPACE}\build" --config Release -- /verbosity:minimal /maxCpuCount /noLogo
        & ${env:CMAKE_EXE} --build "${env:GITHUB_WORKSPACE}\build" --config Debug -- /verbosity:minimal /maxCpuCount /noLogo

    - name: Build (Ninja)
      if: matrix.GEN == 'Ninja Multi-Config'
      shell: pwsh
      run: |
        $VER = switch ('${{matrix.VER}}') { `
          'v140' {'14.0'} `
          'v141' {'14.1'} `
          'v142' {'14.2'} `
          'v143' {'14.3'} }
        Import-Module 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\Microsoft.VisualStudio.DevShell.dll'
        Enter-VsDevShell -VsInstallPath 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise' -SkipAutomaticLocation -DevCmdArguments '-host_arch=x64 -arch=${{matrix.BIN}} -vcvars_ver=${VER}'
        & ${env:CMAKE_EXE} --build "${env:GITHUB_WORKSPACE}\build" --config Release -- -j ${env:NUMBER_OF_PROCESSORS}
        & ${env:CMAKE_EXE} --build "${env:GITHUB_WORKSPACE}\build" --config Debug -- -j ${env:NUMBER_OF_PROCESSORS}

    - name: Test
      working-directory: ${{runner.workspace}}/OpenCL-Layers/build
      shell: pwsh
      run: |
        New-Item -Type Directory HKLM:\SOFTWARE\Khronos\OpenCL\Layers -Force | Out-Null
        foreach ($Config in 'Release','Debug') { `
          Write-Host "Running CTest on ${Config}"
          Set-ItemProperty -Path HKLM:\SOFTWARE\Khronos\OpenCL\Layers -Name "${env:GITHUB_WORKSPACE}\build\bin\${Config}\PrintLayer.dll" -Type DWord -Value 0
          Copy-Item "${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader\install\bin\OpenCL.dll" "${env:GITHUB_WORKSPACE}\build\bin\${Config}\"
          & ${env:CTEST_EXE} -C ${Config} --output-on-failure --parallel ${NUMBER_OF_PROCESSORS}
          Remove-ItemProperty -Path HKLM:\SOFTWARE\Khronos\OpenCL\Layers -Name "${env:GITHUB_WORKSPACE}\build\bin\${Config}\PrintLayer.dll"
        }
