name: Windows

on: [push, pull_request]

jobs:
  compatibility:
    if: false
    runs-on: windows-2022
    strategy:
      matrix:
        VER: [v142, v143, clangcl]
        EXT: [ON, OFF]
        GEN: [Visual Studio 17 2022]
        BIN: [x64, x86]
        STD: [14, 17]
        # TODO: Re-enable v141 check. Track down compiler error causing cl.exe to exhaust runner memory
        # D:\a\OpenCL-Layers\OpenCL-Layers\build\param-verification\res.cpp(2250): fatal error C1060: compiler is out of heap space
        #include:
        #  - VER: v141
        #    EXT: OFF
        #    GEN: Ninja Multi-Config
        #    BIN: x64
        #    STD: 14
    env:
      NINJA_URL: https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-win.zip
      NINJA_ROOT: C:\Tools\Ninja
      VS_ROOT: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise'
      UseMultiToolTask: 'true'                # Better parallel MSBuild execution
      EnforceProcessCountAcrossBuilds: 'true' # -=-
      MultiProcMaxCount: '3'                  # -=-

    steps:
    - name: Install prerequisites with vcpkg
      id: vcpkg-install
      shell: pwsh
      run: C:\vcpkg\vcpkg.exe install boost-wave:${{matrix.BIN}}-windows

    - name: Checkout OpenCL-Layers
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Checkout OpenCL-Headers
      uses: actions/checkout@v2
      with:
        repository: KhronosGroup/OpenCL-Headers
        path: external/OpenCL-Headers

    - name: Checkout OpenCL-CLHPP
      uses: actions/checkout@v2
      with:
        repository: KhronosGroup/OpenCL-CLHPP
        path: external/OpenCL-CLHPP

    - name: Checkout OpenCL-ICD-Loader
      uses: actions/checkout@v2
      with:
        repository: Kerilk/OpenCL-ICD-Loader
        ref: system-layers
        path: external/OpenCL-ICD-Loader
      # Temporary redirection to external repo. Changes needed from there.

    - name: Cache Ninja install
      id: ninja-install
      uses: actions/cache@v2
      with:
        path: |
          C:\Tools\Ninja
        key: ${{runner.os}}-ninja-${{env.NINJA_URL}}

    - name: Install Ninja
      if: steps.ninja-install.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        Invoke-WebRequest ${env:NINJA_URL} -OutFile ~\Downloads\ninja-win.zip
        Expand-Archive ~\Downloads\ninja-win.zip -DestinationPath C:\Tools\Ninja\
        Remove-Item ~\Downloads\*

    - name: Build & install OpenCL-Headers (MSBuild)
      if: matrix.GEN == 'Visual Studio 17 2022'
      shell: pwsh
      run: |
        $BIN = if('${{matrix.BIN}}' -eq 'x86') {'Win32'} else {'x64'}
        $C_FLAGS = '/w'
        & cmake `
          -G '${{matrix.GEN}}' `
          -A $BIN `
          -T ${{matrix.VER}} `
          -D BUILD_TESTING=OFF `
          -D CMAKE_C_FLAGS="$C_FLAGS" `
          -D CMAKE_C_STANDARD=99 `
          -D CMAKE_C_EXTENSIONS=${{matrix.EXT}} `
          -S ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers `
          -B ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\build
        if ($LASTEXITCODE -ne 0) { throw "Configuring OpenCL-Headers failed." }
        & cmake `
          --build ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\build `
          --config Release `
          -- `
          /verbosity:minimal `
          /maxCpuCount `
          /noLogo
        if ($LASTEXITCODE -ne 0) { throw "Building OpenCL-Headers failed." }
        & cmake `
          --install ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\build `
          --prefix ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install `
          --config Release 
        if ($LASTEXITCODE -ne 0) { throw "Installing OpenCL-Headers failed." }

    - name: Build & install OpenCL-Headers (Ninja Multi-Config)
      if: matrix.GEN == 'Ninja Multi-Config'
      shell: pwsh
      run: |
        $VER = switch ('${{matrix.VER}}') { `
          'v141' {'14.1'} `
          'v142' {'14.2'} `
          'v143' {'14.3'} }
        Import-Module "${env:VS_ROOT}\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
        Enter-VsDevShell -VsInstallPath ${env:VS_ROOT} -SkipAutomaticLocation -DevCmdArguments "-host_arch=x64 -arch=${{matrix.BIN}} -vcvars_ver=${VER}"
        $C_FLAGS = '/w'
        & cmake `
          -G '${{matrix.GEN}}' `
          -D BUILD_TESTING=OFF `
          -D CMAKE_MAKE_PROGRAM="${env:NINJA_ROOT}\ninja.exe" `
          -D CMAKE_C_FLAGS="${C_FLAGS}" `
          -D CMAKE_C_STANDARD=99 `
          -D CMAKE_C_EXTENSIONS='${{matrix.EXT}}' `
          -S ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers `
          -B ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\build
        if ($LASTEXITCODE -ne 0) { throw "Configuring OpenCL-Headers failed." }
        & cmake `
          --build ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\build `
          --config Release `
          -- `
          -j ${env:NUMBER_OF_PROCESSORS}
        & cmake `
          --install ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\build `
          --prefix ${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install `
          --config Release
          if ($LASTEXITCODE -ne 0) { throw "Installing OpenCL-Headers failed." }

    - name: Build & install OpenCL-CLHPP (MSBuild)
      if: matrix.GEN == 'Visual Studio 17 2022'
      shell: pwsh
      run: |
        $BIN = if('${{matrix.BIN}}' -eq 'x86') {'Win32'} else {'x64'}
        $C_FLAGS = '/w'
        & cmake `
          -G '${{matrix.GEN}}' `
          -A $BIN `
          -T ${{matrix.VER}} `
          -D BUILD_TESTING=OFF `
          -D BUILD_DOCS=OFF `
          -D BUILD_EXAMPLES=OFF `
          -D OPENCL_CLHPP_BUILD_TESTING=OFF `
          -D CMAKE_C_FLAGS="$C_FLAGS" `
          -D CMAKE_C_STANDARD=99 `
          -D CMAKE_C_EXTENSIONS=${{matrix.EXT}} `
          -D CMAKE_PREFIX_PATH="${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install" `
          -S ${env:GITHUB_WORKSPACE}\external\OpenCL-CLHPP `
          -B ${env:GITHUB_WORKSPACE}\external\OpenCL-CLHPP\build
        if ($LASTEXITCODE -ne 0) { throw "Configuring OpenCL-CLHPP failed." }
        & cmake `
          --build ${env:GITHUB_WORKSPACE}\external\OpenCL-CLHPP\build `
          --config Release `
          -- `
          /verbosity:minimal `
          /maxCpuCount `
          /noLogo
        if ($LASTEXITCODE -ne 0) { throw "Building OpenCL-CLHPP failed." }
        & cmake `
          --install ${env:GITHUB_WORKSPACE}\external\OpenCL-CLHPP\build `
          --prefix ${env:GITHUB_WORKSPACE}\external\OpenCL-CLHPP\install `
          --config Release 
        if ($LASTEXITCODE -ne 0) { throw "Installing OpenCL-CLHPP failed." }

    - name: Build & install OpenCL-CLHPP (Ninja Multi-Config)
      if: matrix.GEN == 'Ninja Multi-Config'
      shell: pwsh
      run: |
        $VER = switch ('${{matrix.VER}}') { `
          'v141' {'14.1'} `
          'v142' {'14.2'} `
          'v143' {'14.3'} }
        Import-Module "${env:VS_ROOT}\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
        Enter-VsDevShell -VsInstallPath ${env:VS_ROOT} -SkipAutomaticLocation -DevCmdArguments "-host_arch=x64 -arch=${{matrix.BIN}} -vcvars_ver=${VER}"
        $C_FLAGS = '/w'
        & cmake `
          -G '${{matrix.GEN}}' `
          -D BUILD_TESTING=OFF `
          -D BUILD_DOCS=OFF `
          -D BUILD_EXAMPLES=OFF `
          -D OPENCL_CLHPP_BUILD_TESTING=OFF `
          -D CMAKE_MAKE_PROGRAM="${env:NINJA_ROOT}\ninja.exe" `
          -D CMAKE_C_FLAGS="${C_FLAGS}" `
          -D CMAKE_C_STANDARD=99 `
          -D CMAKE_C_EXTENSIONS='${{matrix.EXT}}' `
          -D CMAKE_PREFIX_PATH="${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install" `
          -S ${env:GITHUB_WORKSPACE}\external\OpenCL-CLHPP `
          -B ${env:GITHUB_WORKSPACE}\external\OpenCL-CLHPP\build
        if ($LASTEXITCODE -ne 0) { throw "Configuring OpenCL-CLHPP failed." }
        & cmake `
          --build ${env:GITHUB_WORKSPACE}\external\OpenCL-CLHPP\build `
          --config Release `
          -- `
          -j ${env:NUMBER_OF_PROCESSORS}
        & cmake `
          --install ${env:GITHUB_WORKSPACE}\external\OpenCL-CLHPP\build `
          --prefix ${env:GITHUB_WORKSPACE}\external\OpenCL-CLHPP\install `
          --config Release
          if ($LASTEXITCODE -ne 0) { throw "Installing OpenCL-CLHPP failed." }

    - name: Build & install OpenCL-ICD-Loader (MSBuild)
      if: matrix.GEN == 'Visual Studio 17 2022'
      shell: pwsh
      run: |
        $BIN = if('${{matrix.BIN}}' -eq 'x86') {'Win32'} else {'x64'}
        $C_FLAGS = '/w'
        & cmake `
          -G '${{matrix.GEN}}' `
          -A $BIN `
          -T ${{matrix.VER}} `
          -D BUILD_TESTING=OFF `
          -D CMAKE_C_FLAGS="$C_FLAGS" `
          -D CMAKE_C_STANDARD=99 `
          -D CMAKE_C_EXTENSIONS=${{matrix.EXT}} `
          -D CMAKE_PREFIX_PATH="${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install" `
          -S ${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader `
          -B ${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader\build
        if ($LASTEXITCODE -ne 0) { throw "Configuring OpenCL-ICD-Loader failed." }
        & cmake `
          --build ${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader\build `
          --config Release `
          -- `
          /verbosity:minimal `
          /maxCpuCount `
          /noLogo
        if ($LASTEXITCODE -ne 0) { throw "Building OpenCL-ICD-Loader failed." }
        & cmake `
          --install ${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader\build `
          --prefix ${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader\install `
          --config Release
        if ($LASTEXITCODE -ne 0) { throw "Installing OpenCL-ICD-Loader failed." }

    - name: Build & install OpenCL-ICD-Loader (Ninja Multi-Config)
      if: matrix.GEN == 'Ninja Multi-Config'
      shell: pwsh
      run: |
        $VER = switch ('${{matrix.VER}}') { `
          'v141' {'14.1'} `
          'v142' {'14.2'} `
          'v143' {'14.3'} }
        Import-Module "${env:VS_ROOT}\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
        Enter-VsDevShell -VsInstallPath ${env:VS_ROOT} -SkipAutomaticLocation -DevCmdArguments "-host_arch=x64 -arch=${{matrix.BIN}} -vcvars_ver=${VER}"
        $C_FLAGS = '/w'
        & cmake `
          -G '${{matrix.GEN}}' `
          -D BUILD_TESTING=OFF `
          -D CMAKE_MAKE_PROGRAM="${env:NINJA_ROOT}\ninja.exe" `
          -D CMAKE_C_FLAGS="${C_FLAGS}" `
          -D CMAKE_C_STANDARD=99 `
          -D CMAKE_C_EXTENSIONS='${{matrix.EXT}}' `
          -D CMAKE_PREFIX_PATH="${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install" `
          -S ${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader `
          -B ${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader\build
        if ($LASTEXITCODE -ne 0) { throw "Configuring OpenCL-ICD-Loader failed." }
        & cmake `
          --build ${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader\build `
          --config Release `
          -- `
          -j ${env:NUMBER_OF_PROCESSORS}
        if ($LASTEXITCODE -ne 0) { throw "Building OpenCL-ICD-Loader failed." }
        & cmake `
          --install ${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader\build `
          --prefix ${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader\install `
          --config Release
        if ($LASTEXITCODE -ne 0) { throw "Installing OpenCL-ICD-Loader failed." }

    - name: Configure (MSBuild)
      if: matrix.GEN == 'Visual Studio 17 2022'
      shell: pwsh
      run: |
        $BIN = if('${{matrix.BIN}}' -eq 'x86') {'Win32'} else {'x64'}
        $C_FLAGS = '/W4 /WX'
        $CXX_FLAGS = '/W4 /WX /EHsc'
        & cmake `
          -G '${{matrix.GEN}}' `
          -A $BIN `
          -T ${{matrix.VER}} `
          -D OPENCL_LAYERS_BUILD_TESTING=ON `
          -D BUILD_TESTING=ON `
          -D CMAKE_C_FLAGS="${C_FLAGS}" `
          -D CMAKE_C_EXTENSIONS='${{matrix.EXT}}' `
          -D CMAKE_CXX_FLAGS="${CXX_FLAGS}" `
          -D CMAKE_CXX_EXTENSIONS='${{matrix.EXT}}' `
          -D CMAKE_INSTALL_PREFIX="${env:GITHUB_WORKSPACE}\install" `
          -D CMAKE_PREFIX_PATH="${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install;${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader\install;${env:GITHUB_WORKSPACE}\external\OpenCL-CLHPP\install" `
          -D CMAKE_TOOLCHAIN_FILE=${env:VCPKG_INSTALLATION_ROOT}\scripts\buildsystems\vcpkg.cmake `
          -S "${env:GITHUB_WORKSPACE}" `
          -B "${env:GITHUB_WORKSPACE}\build"

    - name: Configure (Ninja Multi-Config)
      if: matrix.GEN == 'Ninja Multi-Config'
      shell: pwsh
      run: |
        $VER = switch ('${{matrix.VER}}') { `
          'v140' {'14.0'} `
          'v141' {'14.1'} `
          'v142' {'14.2'} `
          'v143' {'14.3'} }
        Import-Module 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\Microsoft.VisualStudio.DevShell.dll'
        Enter-VsDevShell -VsInstallPath 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise' -SkipAutomaticLocation -DevCmdArguments "-host_arch=x64 -arch=${{matrix.BIN}} -vcvars_ver=${VER}"
        $C_FLAGS = '/W4 /WX'
        $CXX_FLAGS = '/W4 /WX /EHsc'
        & cmake `
          -G '${{matrix.GEN}}' `
          -D CMAKE_MAKE_PROGRAM="${env:NINJA_ROOT}\ninja.exe" `
          -D OPENCL_LAYERS_BUILD_TESTING=ON `
          -D BUILD_TESTING=ON `
          -D CMAKE_C_FLAGS="${C_FLAGS}" `
          -D CMAKE_C_EXTENSIONS='${{matrix.EXT}}' `
          -D CMAKE_CXX_FLAGS="${CXX_FLAGS}" `
          -D CMAKE_CXX_EXTENSIONS='${{matrix.EXT}}' `
          -D CMAKE_EXE_LINKER_FLAGS='/INCREMENTAL' `
          -D CMAKE_INSTALL_PREFIX="${env:GITHUB_WORKSPACE}\install" `
          -D CMAKE_PREFIX_PATH="${env:GITHUB_WORKSPACE}\external\OpenCL-Headers\install;${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader\install;${env:GITHUB_WORKSPACE}\external\OpenCL-CLHPP\install" `
          -D CMAKE_TOOLCHAIN_FILE=${env:VCPKG_INSTALLATION_ROOT}\scripts\buildsystems\vcpkg.cmake `
          -S "${env:GITHUB_WORKSPACE}" `
          -B "${env:GITHUB_WORKSPACE}\build"

    - name: Build (MSBuild)
      if: matrix.GEN == 'Visual Studio 17 2022'
      shell: pwsh
      run: |
        foreach ($Config in 'Release','Debug') { `
          & cmake `
            --build "${env:GITHUB_WORKSPACE}\build" `
            --config ${Config} `
            -- `
            /verbosity:minimal `
            /maxCpuCount `
            /noLogo
          if ($LASTEXITCODE -ne 0) { throw "Building OpenCL-Layers in ${Config} failed." }
        }

    - name: Build (Ninja)
      if: matrix.GEN == 'Ninja Multi-Config'
      shell: pwsh
      run: |
        $VER = switch ('${{matrix.VER}}') { `
          'v141' {'14.1'} `
          'v142' {'14.2'} `
          'v143' {'14.3'} }
        Import-Module "${env:VS_ROOT}\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
        Enter-VsDevShell -VsInstallPath ${env:VS_ROOT} -SkipAutomaticLocation -DevCmdArguments "-host_arch=x64 -arch=${{matrix.BIN}} -vcvars_ver=${VER}"
        foreach ($Config in 'Release','Debug') { `
          & cmake `
            --build "${env:GITHUB_WORKSPACE}\build" `
            --config ${Config} `
            -- `
            -j ${env:NUMBER_OF_PROCESSORS}
          if ($LASTEXITCODE -ne 0) { throw "Building OpenCL-Layers in ${Config} failed." }
        }

    - name: Test
      shell: pwsh
      run: |
        $ICD_REG_PATH = if('${{matrix.BIN}}' -eq 'x86') { `
          'HKLM:\SOFTWARE\WOW6432Node\Khronos\OpenCL\Vendors' } else { `
          'HKLM:\SOFTWARE\Khronos\OpenCL\Vendors' }
        $LAYER_REG_PATH = if('${{matrix.BIN}}' -eq 'x86') { `
          'HKLM:\SOFTWARE\WOW6432Node\Khronos\OpenCL\Layers' } else { `
          'HKLM:\SOFTWARE\Khronos\OpenCL\Layers' }
        New-Item -Type Directory ${ICD_REG_PATH}   -Force | Out-Null
        New-Item -Type Directory ${LAYER_REG_PATH} -Force | Out-Null
        foreach ($Config in 'Release','Debug') { `
          Copy-Item "${env:GITHUB_WORKSPACE}\external\OpenCL-ICD-Loader\install\bin\OpenCL.dll" "${env:GITHUB_WORKSPACE}\build\bin\${Config}\"
          foreach ($Layer in 'PrintLayer','CLObjectLifetimeLayer','CLParamVerificationLayer','CLParamVerificationLayerObjectValidityOnly') { `
            $LayerPriority = 0
            Write-Host "Running CTest on ${Config} for ${Layer}"
            $ICD = switch (${Layer}) { `
              'PrintLayer'                                 {""} `
              'CLObjectLifetimeLayer'                      {"${env:GITHUB_WORKSPACE}\build\bin\${Config}\CLObjectLifetimeICD.dll"} `
              'CLParamVerificationLayer'                   {"${env:GITHUB_WORKSPACE}\build\bin\${Config}\CLObjectLifetimeICD.dll"} `
              'CLParamVerificationLayerObjectValidityOnly' {"${env:GITHUB_WORKSPACE}\build\bin\${Config}\CLObjectLifetimeICD.dll"} }
            $TestsRegex = switch (${Layer}) { `
              'PrintLayer'                                 {'PrintLayer'} `
              'CLObjectLifetimeLayer'                      {'ObjectLifetime'} `
              'CLParamVerificationLayer'                   {'ParamVerification'} `
              'CLParamVerificationLayerObjectValidityOnly' {'ObjectValidity'} }
            $ExcludeRegex = switch (${Layer}) { `
              'PrintLayer'                                 {''} `
              'CLObjectLifetimeLayer'                      {''} `
              'CLParamVerificationLayer'                   {'ObjectValidity'} `
              'CLParamVerificationLayerObjectValidityOnly' {''} }
            $LayersToReg = switch (${Layer}) { `
              'PrintLayer'                                 {"${Layer}"} `
              'CLObjectLifetimeLayer'                      {"${Layer}"} `
              'CLParamVerificationLayer'                   {"${Layer}"} `
              'CLParamVerificationLayerObjectValidityOnly' {"CLObjectLifetimeLayer;CLParamVerificationLayer"} }
            if ($ICD) { Set-ItemProperty -Path ${ICD_REG_PATH} -Type DWord -Value 0 -Name $ICD }
            foreach ($BaseName in ${LayersToReg}.Split(';')) { `
              Set-ItemProperty -Path ${LAYER_REG_PATH} -Type DWord -Value ($LayerPriority++) -Name ${env:GITHUB_WORKSPACE}\build\bin\${Config}\${BaseName}.dll }
            & ctest `
              --test-dir ${env:GITHUB_WORKSPACE}\build `
              --build-config ${Config} `
              --tests-regex $TestsRegex `
              $(if ($ExcludeRegex) {'--exclude-regex',"${ExcludeRegex}"}) `
              --output-on-failure `
              --no-tests=error `
              --parallel ${env:NUMBER_OF_PROCESSORS}
            if ($LASTEXITCODE -ne 0) { throw "Testing ${Layer} in ${Config} failed." }
            if ($ICD) { Remove-ItemProperty -Path ${ICD_REG_PATH} -Name $ICD }
            foreach ($BaseName in ${LayersToReg}.Split(';')) { `
              Remove-ItemProperty -Path ${LAYER_REG_PATH} -Name ${env:GITHUB_WORKSPACE}\build\bin\${Config}\${BaseName}.dll }
          }
          & ctest `
            --test-dir ${env:GITHUB_WORKSPACE}\build `
            --build-config ${Config} `
            --tests-regex SettingsLocation `
            --output-on-failure `
            --no-tests=error `
            --parallel ${env:NUMBER_OF_PROCESSORS}
        }
